<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac上常用的shell指令</title>
    <url>/Mac/ckagg7kfp0000l5rb9kgr6rat/</url>
    <content><![CDATA[<blockquote>
<p><font size=3>在我们每次使用全新或还原后的Mac时，总会重复遇到一些问题，像显示隐藏文件、运行任何来源的App等，下面我就记录了一些常用的命令。</font></p>
</blockquote>
<a id="more"></a>
<h3 id="强制允许来自任何来源App运行"><a href="#强制允许来自任何来源App运行" class="headerlink" title="强制允许来自任何来源App运行"></a>强制允许来自任何来源App运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo spctl --master-disable</span></span><br></pre></td></tr></table></figure>
<h3 id="强制打开提示损坏的App"><a href="#强制打开提示损坏的App" class="headerlink" title="强制打开提示损坏的App"></a>强制打开提示损坏的App</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo xattr -d com.apple.quarantine [app路径]</span></span><br></pre></td></tr></table></figure>

<h3 id="在finder中显示-隐藏隐藏文件和文件夹"><a href="#在finder中显示-隐藏隐藏文件和文件夹" class="headerlink" title="在finder中显示/隐藏隐藏文件和文件夹"></a>在finder中显示/隐藏隐藏文件和文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 隐藏</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">false</span> ; killall Finder</span></span><br></pre></td></tr></table></figure>

<h3 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 国内</span></span><br><span class="line"><span class="meta">$</span><span class="bash">/bin/zsh -c <span class="string">"<span class="variable">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>"</span></span></span><br></pre></td></tr></table></figure>

<h3 id="卸载brew"><a href="#卸载brew" class="headerlink" title="卸载brew"></a>卸载brew</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS应用内支付（IAP）失败注意事项汇总</title>
    <url>/iOS/ckagg7kfu0002l5rbe4hi16gv/</url>
    <content><![CDATA[<blockquote>
<p><font size=3>在我们开发iOS内购(IAP)过程中，总会出现一些内购失败的问题，下面我就记录了个人开发过程中支付失败的排查方向汇总。</font></p>
</blockquote>
<a id="more"></a>

<ul>
<li><p>productId和appstore后台配置是否一致</p>
</li>
<li><p>确保凭据验证是正确的环境(Sandbox还是Product)</p>
</li>
<li><p>确保使用64位编码对回执凭据进行了编码验证</p>
</li>
<li><p>确保使用的是正确的沙盒账号支付</p>
</li>
<li><p>确保iTunes Connect后台IAP项目是可用的（如果应用是被拒绝状态，请在iTunes Connect后台重新将IAP项目设为Cleared for Sale）</p>
</li>
<li><p>确保同意了最新的iOS开发者许可协议</p>
</li>
<li><p>确保账号添加了收款账户（财政需求表）且同意了最新的付费应用协议（Paid Applications contract）</p>
</li>
<li><p>应用不能处于等待开发者发布（Pending Developer Release）状态，等待发布状态的IAP是无法测试的。</p>
</li>
<li><p>确保是真机调试（越狱设备是不能正常内购的）</p>
</li>
<li><p>确保bundleID是正确的</p>
</li>
<li><p>确保使用的描述文件（provisioning profile）是正确的，使用企业证书是不能进行内购的</p>
</li>
<li><p>确保bundleId下是打开了In-App Purchases功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Shell命令</title>
    <url>/Shell/ckagg7kfy0006l5rbhxlr8096/</url>
    <content><![CDATA[<p><em>&emsp;&emsp;本文内容主要介绍几种常用的shell命令和实际使用案例。</em></p>
<a id="more"></a>

<hr>
<h1 id="1-find命令-查找"><a href="#1-find命令-查找" class="headerlink" title="1. find命令[查找]"></a>1. find命令[<a href="http://man.linuxde.net/find" target="_blank" rel="noopener">查找</a>]</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">find [path] [-action] [property]</span></span><br></pre></td></tr></table></figure>

<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</span><br><span class="line">-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；</span><br><span class="line">-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</span><br><span class="line">-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；</span><br><span class="line">-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</span><br><span class="line">-daystart：从本日开始计算时间；</span><br><span class="line">-depth：从指定目录下最深层的子目录开始查找；</span><br><span class="line">-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；</span><br><span class="line">-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</span><br><span class="line">-false：将find指令的回传值皆设为False；</span><br><span class="line">-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；</span><br><span class="line">-follow：排除符号连接；</span><br><span class="line">-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；</span><br><span class="line">-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；</span><br><span class="line">-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span><br><span class="line">-help或——help：在线帮助；</span><br><span class="line">-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</span><br><span class="line">-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；</span><br><span class="line">-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；</span><br><span class="line">-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；</span><br><span class="line">-maxdepth&lt;目录层级&gt;：设置最大目录层级；</span><br><span class="line">-mindepth&lt;目录层级&gt;：设置最小目录层级；</span><br><span class="line">-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</span><br><span class="line">-mount：此参数的效果和指定“-xdev”相同；</span><br><span class="line">-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</span><br><span class="line">-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-nogroup：找出不属于本地主机群组识别码的文件或目录；</span><br><span class="line">-noleaf：不去考虑目录至少需拥有两个硬连接存在；</span><br><span class="line">-nouser：找出不属于本地主机用户识别码的文件或目录；</span><br><span class="line">-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；</span><br><span class="line">-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span><br><span class="line">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span><br><span class="line">-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“.&#x2F;”字符串；</span><br><span class="line">-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；</span><br><span class="line">-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；</span><br><span class="line">-prune：不寻找字符串作为寻找文件或目录的范本样式;</span><br><span class="line">-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span><br><span class="line">-true：将find指令的回传值皆设为True；</span><br><span class="line">-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span><br><span class="line">-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</span><br><span class="line">-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；</span><br><span class="line">-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span><br><span class="line">-version或——version：显示版本信息；</span><br><span class="line">-xdev：将范围局限在先行的文件系统中；</span><br><span class="line">-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</span><br></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找并列出当前目录所有文件(包含子目录)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">find .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查找当前目录下的文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash">find . -maxdepth 1 -<span class="built_in">type</span> d </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查找当前目录下的所有文件夹（包含子文件夹中的文件夹）</span></span><br><span class="line"><span class="meta">$</span><span class="bash">find . -<span class="built_in">type</span> d </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查找*.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash">find . -name <span class="string">"*.txt"</span> -<span class="built_in">type</span> f</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="2-ls命令-查看"><a href="#2-ls命令-查看" class="headerlink" title="2. ls命令[查看]"></a>2. ls命令[<a href="http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html" target="_blank" rel="noopener">查看</a>]</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ls [选项] [path]</span></span><br></pre></td></tr></table></figure>

<h2 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；</span><br><span class="line">-A：显示除影藏文件“.”和“..”以外的所有文件列表；</span><br><span class="line">-C：多列显示输出结果。这是默认选项；</span><br><span class="line">-l：与“-C”选项功能相反，所有输出信息用单列格式输出，不输出为多列；</span><br><span class="line">-F：在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“&#x2F;”表示目录，“@”表示符号链接，“|”表示命令管道FIFO，“&#x3D;”表示sockets套接字。当文件为普通文件时，不输出任何标识符；</span><br><span class="line">-b：将文件中的不可输出的字符以反斜线“”加字符编码的方式输出；</span><br><span class="line">-c：与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的一句是文件的状态改变时间；</span><br><span class="line">-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；</span><br><span class="line">-f：此参数的效果和同时指定“aU”参数相同，并关闭“lst”参数的效果；</span><br><span class="line">-i：显示文件索引节点号（inode）。一个索引节点代表一个文件；</span><br><span class="line">--file-type：与“-F”选项的功能相同，但是不显示“*”；</span><br><span class="line">-k：以KB（千字节）为单位显示文件大小；</span><br><span class="line">-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；</span><br><span class="line">-m：用“,”号区隔每个文件和目录的名称；</span><br><span class="line">-n：以用户识别码和群组识别码替代其名称；</span><br><span class="line">-r：以文件名反序排列并输出目录内容列表；</span><br><span class="line">-s：显示文件和目录的大小，以区块为单位；</span><br><span class="line">-t：用文件和目录的更改时间排序；</span><br><span class="line">-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；</span><br><span class="line">-R：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line">--full-time：列出完整的日期与时间；</span><br><span class="line">--color[&#x3D;WHEN]：使用不同的颜色高亮显示不同类型的。</span><br></pre></td></tr></table></figure>

<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出当前目录所有文件和文件夹名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ls </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">列出上级目录下的md文件（结果为../xx.md）</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ls ../*.md</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前目录下包括影藏文件在内的所有文件列表</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ls -a</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-cp命令"><a href="#3-cp命令" class="headerlink" title="3. cp命令"></a>3. cp命令</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cp [选项] [path] [targetpath]</span></span><br></pre></td></tr></table></figure>

<h2 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a：此参数的效果和同时指定&quot;-dpR&quot;参数相同；</span><br><span class="line">-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</span><br><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在；</span><br><span class="line">-i：覆盖既有文件之前先询问用户；</span><br><span class="line">-l：对源文件建立硬连接，而非复制文件；</span><br><span class="line">-p：保留源文件或目录的属性；</span><br><span class="line">-R&#x2F;r：递归处理，将指定目录下的所有文件与子目录一并处理；</span><br><span class="line">-s：对源文件建立符号连接，而非复制文件；</span><br><span class="line">-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</span><br><span class="line">-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</span><br><span class="line">-b：覆盖已存在的文件目标前将目标文件备份；</span><br><span class="line">-v：详细显示命令执行的操作。</span><br></pre></td></tr></table></figure>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 忽略提示强制复制</span></span><br><span class="line"><span class="meta">$</span><span class="bash">cp -f xx/xx.file yy/yy.file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归复制文件夹所有内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash">cp -r xx yy</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="4-字符串截取"><a href="#4-字符串截取" class="headerlink" title="4. 字符串截取"></a>4. 字符串截取</h1><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><pre><code>其实就是删除掉*匹配到的数据
${varible##*string} 从左向右截取最后一个string后的字符串
${varible#*string}从左向右截取第一个string后的字符串
${varible%%string*}从右向左截取最后一个string后的字符串
${varible%string*}从右向左截取第一个string后的字符串</code></pre><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">temp=<span class="string">"unuselessString!someusefulstring!abcd"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="variable">$&#123;temp##*!&#125;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> abcd</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="variable">$&#123;temp#*!&#125;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> someusefulstring!abcd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="variable">$&#123;temp%%!*&#125;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">unuselessString</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="variable">$&#123;temp%!*&#125;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">unuselessString!someusefulstring</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac开发工具自检</title>
    <url>/Mac/ckagg7kfz0008l5rb3pvl04kh/</url>
    <content><![CDATA[<blockquote>
<p><font size=3>在我们每次使用全新或还原后的Mac时，生产工具和生产环境总是需要重新下载和配置，为了避免遗漏临时下载安装，下面我就记录了个人使用偏好的一些软件和插件以及生产环境的配置。</font></p>
</blockquote>
<a id="more"></a>

<h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><ul>
<li>XCode<blockquote>
<p>Applestore直接下载或者登录Apple后台选择版本下载<br>&emsp;&emsp;<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">https://developer.apple.com/download/more/</a><br>XCode配色选择<br>&emsp;&emsp;XCode –&gt; Preference –&gt; Font&amp;Colors –&gt; Theme –&gt; Dusk</p>
</blockquote>
</li>
</ul>
<ul>
<li>Command Line Tools</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ul>
<li>Chrome<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">https://www.google.cn/chrome/</a></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="文字编辑工具"><a href="#文字编辑工具" class="headerlink" title="文字编辑工具"></a>文字编辑工具</h4><ul>
<li>MacDown(MarkDown编辑工具)<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">https://macdown.uranusjr.com/</a></p>
</blockquote>
</li>
</ul>
<ul>
<li>SublimeText(多文档格式编辑工具 )<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">http://www.sublimetext.com/</a></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="版本迭代管理工具"><a href="#版本迭代管理工具" class="headerlink" title="版本迭代管理工具"></a>版本迭代管理工具</h4><ul>
<li>Git <blockquote>
<p>Mac自带 查看版本$git –version<br>在GitPage上配置本机生成的ssh密钥</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="http-https数据抓取工具"><a href="#http-https数据抓取工具" class="headerlink" title="http/https数据抓取工具"></a>http/https数据抓取工具</h4><ul>
<li>Charles<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://www.charlesproxy.com/download/" target="_blank" rel="noopener">https://www.charlesproxy.com/download/</a><br>激活方式<br>&emsp;&emsp;Registered Name：<a href="http://www.macenjoy.co" target="_blank" rel="noopener">www.macenjoy.co</a><br>&emsp;&emsp;License Key：D2CD39C498A973D492</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h4><ul>
<li>iterm2(终端替换)<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">https://www.iterm2.com/downloads.html</a><br>Term2配色主题 Solarized Dark theme<br>&emsp;&emsp;<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">http://ethanschoonover.com/solarized</a><br>Solarized Dark theme配置下载完成后配置路径<br>&emsp;&emsp;Profiles -&gt; Colors -&gt; Color Presets -&gt; Import，选择刚才解压的solarized-&gt;iterm2-colors-solarized-&gt;Solarized Dark.itermcolors</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="解压缩工具"><a href="#解压缩工具" class="headerlink" title="解压缩工具"></a>解压缩工具</h4><ul>
<li>keka<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://github.com/aonez/Keka/releases" target="_blank" rel="noopener">https://github.com/aonez/Keka/releases</a></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h4><ul>
<li><p>广告终结者（Ad Terminator）</p>
<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://www.adtchrome.com/" target="_blank" rel="noopener">https://www.adtchrome.com/</a></p>
</blockquote>
</li>
<li><p>Project Naptha 图片内文字识别提取</p>
<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://projectnaptha.com/" target="_blank" rel="noopener">https://projectnaptha.com/</a></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h4><ul>
<li>Class-dump<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">http://stevenygard.com/projects/class-dump/</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">class-dump [options] &lt;mach-o-file&gt;</span></span><br><span class="line">where options are:</span><br><span class="line">        -a             show instance variable offsets</span><br><span class="line">        -A             show implementation addresses</span><br><span class="line">        --arch &lt;arch&gt;  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64)</span><br><span class="line">        -C &lt;regex&gt;     only display classes matching regular expression</span><br><span class="line">        -f &lt;str&gt;       find string in method name</span><br><span class="line">        -H             generate header files in current directory, or directory specified with -o</span><br><span class="line">        -I             sort classes, categories, and protocols by inheritance (overrides -s)</span><br><span class="line">        -o &lt;dir&gt;       output directory used for -H</span><br><span class="line">        -r             recursively expand frameworks and fixed VM shared libraries</span><br><span class="line">        -s             sort classes and categories by name</span><br><span class="line">        -S             sort methods by name</span><br><span class="line">        -t             suppress header in output, for testing</span><br><span class="line">        --list-arches  list the arches in the file, then exit</span><br><span class="line">        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS&lt;version&gt;.sdk</span><br><span class="line">        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX&lt;version&gt;.sdk</span><br><span class="line">        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)</span><br></pre></td></tr></table></figure>

<ul>
<li>Hopper Disassembler<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://www.hopperapp.com/download.html" target="_blank" rel="noopener">https://www.hopperapp.com/download.html</a></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="重签名工具"><a href="#重签名工具" class="headerlink" title="重签名工具"></a>重签名工具</h4><ul>
<li><p>iReSign</p>
<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://github.com/maciekish/iReSign" target="_blank" rel="noopener">https://github.com/maciekish/iReSign</a></p>
</blockquote>
</li>
<li><p>iOS App Signer</p>
<blockquote>
<p>下载地址<br>&emsp;&emsp;<a href="https://github.com/DanTheMan827/ios-app-signer/releases" target="_blank" rel="noopener">https://github.com/DanTheMan827/ios-app-signer/releases</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Git命令</title>
    <url>/Git/ckagg7kg00009l5rbdwu12c2q/</url>
    <content><![CDATA[<p><em>&emsp;&emsp;Git操作流程图解</em><br><img src="/images/bg2015120901.png" alt=""><br><em>&emsp;&emsp;几个专用名词的译名如下。</em></p>
<pre><code>* Workspace：工作区  
* Index / Stage：暂存区
* Repository：仓库区（或本地仓库）
* Remote：远程仓库</code></pre><a id="more"></a>

<p>下面是常用 Git 命令清单。</p>
<hr>
<h1 id="零、最常用的命令组"><a href="#零、最常用的命令组" class="headerlink" title="零、最常用的命令组"></a>零、最常用的命令组</h1><ul>
<li><h2 id="创建新的库关联Git"><a href="#创建新的库关联Git" class="headerlink" title="创建新的库关联Git"></a>创建新的库关联Git</h2></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化git</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git init </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关联远程git仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote add [branchName] [url]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送关联远程git分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git push --<span class="built_in">set</span>-upstream [<span class="built_in">local</span>-branch-name] [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送至远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [branch-name]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="保留版本信息本地项目迁移Git"><a href="#保留版本信息本地项目迁移Git" class="headerlink" title="保留版本信息本地项目迁移Git"></a>保留版本信息本地项目迁移Git</h2></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看远程项目信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote -v</span></span><br><span class="line">master	[git-url] (fetch)</span><br><span class="line">master	[git-url] (push)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在新的gitlab上建立项目生成git地址：[new-git-url]</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote <span class="built_in">set</span>-url [branch-name] [new-git-url]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看配置是否成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote -v</span></span><br><span class="line">master	[new-git-url] (fetch)</span><br><span class="line">master	[new-git-url] (push)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交分支到新的git地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [branch-name]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="Git提交"><a href="#Git提交" class="headerlink" title="Git提交"></a>Git提交</h2></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">modify files和add new files 都是用<span class="string">'add'</span>命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加你的版本信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"your message"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送至远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [branch-name]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="Git-切换分支"><a href="#Git-切换分支" class="headerlink" title="Git 切换分支"></a>Git 切换分支</h2></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将改动的先提交 或者stash掉 </span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">""</span> | <span class="variable">$git</span> stash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">再切换分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout [branch-name]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="Git-强制覆盖本地分支"><a href="#Git-强制覆盖本地分支" class="headerlink" title="Git 强制覆盖本地分支"></a>Git 强制覆盖本地分支</h2></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git强制覆盖：</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git fetch --all</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset --hard origin/master</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git pull</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">git强制覆盖本地命令（单条执行）：</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示当前的Git配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git config --list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑Git配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git config -e [--global]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git config [--global] user.name <span class="string">"[name]"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git config [--global] user.email <span class="string">"[email address]"</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add [dir]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git add -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git rm [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git rm --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交时显示所有diff信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit --amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个tag在当前commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git tag [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个tag在指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git tag [tag] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git tag -d [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin :refs/tags/[tagName]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看tag信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git show [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [remote] [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提交所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [remote] --tags</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reflog</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载远程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git fetch [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示所有远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote show [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote add [shortname] [url]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git pull [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [remote] --force</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push [remote] --all</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout [commit] [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset --hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset --hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git reset --keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git revert [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git stash pop</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成一个可供发布的压缩包</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git archive</span></span><br></pre></td></tr></table></figure>

<p>（完）</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo在Github Pages上搭建blog（二）</title>
    <url>/Hexo/ckagg7kg1000cl5rb43pk6dyp/</url>
    <content><![CDATA[<p><em>&emsp;&emsp;本文内容主要介绍的是Github Pages + Hexo 在Mac下的文章新建与发表。</em></p>
<a id="more"></a>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>
<ul>
<li><h4 id="布局（layout）"><a href="#布局（layout）" class="headerlink" title="布局（layout）"></a>布局（layout）</h4></li>
</ul>
<p>&emsp;&emsp;Hexo 有三种默认布局：post、page 和 draft。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p>
<table>
<thead>
<tr>
<th align="left">布局</th>
<th align="left">路径</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>post/其他自定义布局</code></td>
<td align="left"><code>source/_posts</code></td>
</tr>
<tr>
<td align="left"><code>page</code></td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>draft</code></td>
<td align="left"><code>source/_drafts</code></td>
</tr>
</tbody></table>
<ul>
<li><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4></li>
</ul>
<p>&emsp;&emsp;Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">:title</td>
<td align="left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td align="left">:year</td>
<td align="left">建立的年份，比如， 2015</td>
</tr>
<tr>
<td align="left">:month</td>
<td align="left">建立的月份（有前导零），比如， 04</td>
</tr>
<tr>
<td align="left">:i_month</td>
<td align="left">建立的月份（无前导零），比如， 4</td>
</tr>
<tr>
<td align="left">:day</td>
<td align="left">建立的日期（有前导零），比如， 07</td>
</tr>
<tr>
<td align="left">:i_day</td>
<td align="left">建立的日期（无前导零），比如， 7</td>
</tr>
</tbody></table>
<ul>
<li><h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4></li>
</ul>
<p>&emsp;&emsp;刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>

<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>
<ul>
<li><h4 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h4></li>
</ul>
<p>&emsp;&emsp;在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new photo <span class="string">"My Gallery"</span></span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">layout</td>
<td align="left">布局</td>
</tr>
<tr>
<td align="left">title</td>
<td align="left">标题</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">文件建立日期</td>
</tr>
<tr>
<td align="left">—</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">### 文章发表</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&emsp;&emsp;完成文字书写后使用终端命令完成静态页面生成和部署</td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><h4 id="静态页面生成"><a href="#静态页面生成" class="headerlink" title="静态页面生成"></a>静态页面生成</h4></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  hexo generate [-action]</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d, --deploy:文件生成后立即部署网站</span><br><span class="line">-w, --watch:监视文件变动</span><br><span class="line">-b, --bail:生成过程中如果发生任何未处理的异常则抛出异常</span><br><span class="line">-f, --force:强制重新生成文件</span><br><span class="line">(Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。</span><br><span class="line">使用该参数的效果接近 hexo clean &amp;&amp; hexo generate)</span><br><span class="line">-c, --concurrency:最大同时生成文件的数量，默认无限制</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;该命令可以简写为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  hexo g [-action]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="静态页面部署至GitHub-Pages"><a href="#静态页面部署至GitHub-Pages" class="headerlink" title="静态页面部署至GitHub Pages"></a>静态页面部署至GitHub Pages</h4></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line">部署网站。</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;该命令可以简写为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h3><ul>
<li><h4 id="一键生成本地预览脚本"><a href="#一键生成本地预览脚本" class="headerlink" title="一键生成本地预览脚本"></a>一键生成本地预览脚本</h4></li>
</ul>
<p>&emsp;&emsp;preview.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd "你的hexo目录"</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里是使用Safari打开，如果想用其他浏览器打开，修改Safari.app即可</span></span><br><span class="line">open -a "/Applications/Safari.app" http://localhost:4000/</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="一键部署脚本"><a href="#一键部署脚本" class="headerlink" title="一键部署脚本"></a>一键部署脚本</h4></li>
</ul>
<p>&emsp;&emsp;deploy.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd "你的hexo目录"</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>OC中常用数据类型转换</title>
    <url>/iOS/ckagg7kg6000dl5rb08q74x0s/</url>
    <content><![CDATA[<p><em>&emsp;&emsp;本文档主要汇总在开发过程中OC常用的数据类型之间的转换方式。</em></p>
<a id="more"></a>

<h3 id="1-int、NSInteger、NSNumber区别"><a href="#1-int、NSInteger、NSNumber区别" class="headerlink" title="1. int、NSInteger、NSNumber区别"></a>1. int、NSInteger、NSNumber区别</h3><p>&emsp;&emsp;对于NSInteger和int的区别在官方文档API有着这样的描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">When building 32-bit applications, NSInteger is a 32-bit integer. </span><br><span class="line"></span><br><span class="line">A 64-bit application treats NSInteger as a 64-bit integer.</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;意思就是在32位App中，NSInteger是32位整型，在64位App中，NSInteger是64位整型.</p>
<p>&emsp;&emsp;所以<strong>在MAC_OS或iOS系统编程中如果用到整型或无符号整型变量时，尽量采用NSInteger或NSUInteger</strong>。</p>
<p><strong>NSNumber：Cocoa提供了NSNumber类来包装（即以对象形式实现）基本数据类型。</strong></p>
<p><strong>NSInteger是基础类型，但是NSNumber是一个类。如果想要存储一个数值，直接用NSInteger是不行的。</strong>比如在一个Array里面这样用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array= [[<span class="built_in">NSArray</span> alloc]init];</span><br><span class="line">[array addObject:<span class="number">1</span>];<span class="comment">//会出现编译错误</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这样是会引发编译错误的，因为NSArray里面放的需要是一个类，但‘1’不是。这个时候需要用到NSNumber:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array= [[<span class="built_in">NSArray</span> alloc]init];</span><br><span class="line">[array addObject:[<span class="built_in">NSNumber</span> numberWithInt:<span class="number">1</span>]];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-NSString-和-int-相互转换"><a href="#2-NSString-和-int-相互转换" class="headerlink" title="2. NSString 和 int 相互转换"></a>2. NSString 和 int 相互转换</h3><ul>
<li><h4 id="NSString-to-int"><a href="#NSString-to-int" class="headerlink" title="NSString to int"></a>NSString to int</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"2"</span>;</span><br><span class="line"><span class="keyword">int</span> intValue = [string intValue];</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="int-to-NSString"><a href="#int-to-NSString" class="headerlink" title="int to NSString"></a>int to NSString</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> intValue = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">NSString</span> *string = [<span class="built_in">NSString</span> stringWithFormate:<span class="string">@"%d"</span>, intValue];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-NSString-和-NSInteger-相互转换"><a href="#3-NSString-和-NSInteger-相互转换" class="headerlink" title="3. NSString 和 NSInteger 相互转换"></a>3. NSString 和 NSInteger 相互转换</h3><ul>
<li><h4 id="NSString-to-NSInteger"><a href="#NSString-to-NSInteger" class="headerlink" title="NSString to NSInteger"></a>NSString to NSInteger</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"3"</span>;</span><br><span class="line"><span class="built_in">NSInteger</span> integer = [string integerValue];</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="NSInteger-to-NSString"><a href="#NSInteger-to-NSString" class="headerlink" title="NSInteger to NSString"></a>NSInteger to NSString</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> integer = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSString</span> *string = [<span class="built_in">NSString</span> stringWithFormate:<span class="string">@"%d"</span>, integer];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-NSString-和-NSNumber-相互转换"><a href="#4-NSString-和-NSNumber-相互转换" class="headerlink" title="4. NSString 和 NSNumber 相互转换"></a>4. NSString 和 NSNumber 相互转换</h3><ul>
<li><h4 id="NSString-to-NSNumber"><a href="#NSString-to-NSNumber" class="headerlink" title="NSString to NSNumber"></a>NSString to NSNumber</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"123"</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *result;</span><br><span class="line"><span class="built_in">NSNumberFormatter</span> *f = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</span><br><span class="line">result=[f numberFromString:string];</span><br><span class="line"><span class="keyword">if</span>(!(result))&#123;</span><br><span class="line">	result=string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="NSNumber-to-NSString"><a href="#NSNumber-to-NSString" class="headerlink" title="NSNumber to NSString"></a>NSNumber to NSString</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *number = [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">3</span>]];</span><br><span class="line"><span class="built_in">NSNumberFormatter</span> *numberFormatter = [[<span class="built_in">NSNumberFormatteralloc</span>] init];</span><br><span class="line"><span class="built_in">NSString</span> *string = [numberFormatter stringFromNumber:number];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-NSString和float的相互转换"><a href="#5-NSString和float的相互转换" class="headerlink" title="5. NSString和float的相互转换"></a>5. NSString和float的相互转换</h3><ul>
<li><h4 id="NSString-to-float"><a href="#NSString-to-float" class="headerlink" title="NSString to float"></a>NSString to float</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *floatString = <span class="string">@"4.3"</span>;</span><br><span class="line"><span class="keyword">float</span> floatValue = [floatString floatValue];</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="float-to-NSString"><a href="#float-to-NSString" class="headerlink" title="float to NSString"></a>float to NSString</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> floatValue = <span class="number">4.3</span>;</span><br><span class="line"><span class="built_in">NSString</span> * string = [<span class="built_in">NSString</span> stringWithFormate:<span class="string">@"%f"</span>, floatValue];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-JsonString和NSDictionary的相互转换"><a href="#6-JsonString和NSDictionary的相互转换" class="headerlink" title="6. JsonString和NSDictionary的相互转换"></a>6. JsonString和NSDictionary的相互转换</h3><ul>
<li><h4 id="JsonString-to-NSDictionary"><a href="#JsonString-to-NSDictionary" class="headerlink" title="JsonString to NSDictionary"></a>JsonString to NSDictionary</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *jsonString = <span class="string">@"&#123;\"date\":\"abc\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">NSError</span> *error; </span><br><span class="line">   <span class="built_in">NSData</span> *jsonData = [jsonString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">   <span class="built_in">NSDictionary</span> *jsonDic = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="built_in">NSJSONReadingMutableContainers</span> error:error];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (error) &#123;  </span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"Error:%@"</span> , error);  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="NSDictionary-to-JsonString"><a href="#NSDictionary-to-JsonString" class="headerlink" title="NSDictionary to JsonString"></a>NSDictionary to JsonString</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *jsonDic = @&#123;<span class="string">@"date"</span>: <span class="string">@"abc"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSError</span> *error;  </span><br><span class="line"><span class="built_in">NSData</span> *jsonData = [<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:jsonDic options:<span class="built_in">NSJSONWritingPrettyPrinted</span> error:&amp;error];  </span><br><span class="line"><span class="built_in">NSString</span> *jsonString =[[<span class="built_in">NSString</span> alloc] initWithData:jsonData encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error) &#123;  </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error:%@"</span> , error);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo在Github Pages上搭建blog（一）</title>
    <url>/Hexo/ckagg7kg7000hl5rb4kvp4oer/</url>
    <content><![CDATA[<p><em>&emsp;&emsp;本文档主要介绍的是Github Pages + Hexo 环境的配置搭建，本文在此只详细介绍Mac OS下的环境配置。</em></p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li>
<li><a href="https://nodejs.org/en/download" target="_blank" rel="noopener">Node.js</a></li>
<li><a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">markdown编辑器</a></li>
<li>域名</li>
</ul>
<p>&emsp;&emsp;markdown编辑器是非必须的，只要你熟悉语法，随便一个编辑器来写都不是问题。这里编辑器推荐的的MacDown</p>
<p>&emsp;&emsp;域名也是非必须的。注册域名的教程这里就不写了。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>&emsp;&emsp;在Mac OS下，直接到<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git-scm</a>官网下载安装。</p>
<p>&emsp;&emsp;在终端中输入验证git是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>&emsp;&emsp;在Mac OS下，直接到<a href="https://nodejs.org/en/download" target="_blank" rel="noopener">node.js</a>官网下载安装。</p>
<p>&emsp;&emsp;在终端中输入验证node.js是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>&emsp;&emsp;使用终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果出现权限问题使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install --unsafe-perm --verbose -g hexo</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在终端中输入验证hexo是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo -v</span></span><br></pre></td></tr></table></figure>
<h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><ul>
<li><h3 id="检查-SSH-keys的设置"><a href="#检查-SSH-keys的设置" class="headerlink" title="检查 SSH keys的设置"></a>检查 SSH keys的设置</h3></li>
</ul>
<p>&emsp;&emsp;首先先检查电脑上是否有现有的ssh key 打开终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .ssh/</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果提示：No such file or directory 说明本没有ssh key需要生成一份</p>
<ul>
<li><h3 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h3></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"自己的邮箱"</span></span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;然后系统会要你输入密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;&lt;输入密码时没有*提示&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p>
<p>&emsp;&emsp;最后看到这样的界面，就成功设置ssh key了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in &#x2F;Users&#x2F;yourusername&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;Users&#x2F;yourusername&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:UQROQLsdUvfR5dKyjH&#x2F;C7nVFKroImrhxYtqybE4ZI+Pq youremailaddress</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|     .o.*o+ .. ..|</span><br><span class="line">| .     W + . ..o |</span><br><span class="line">|. .   * X   . o +|</span><br><span class="line">| + . . * +   o + |</span><br><span class="line">|  + . &#x3D; S . o + .|</span><br><span class="line">|   . . + o o o. o|</span><br><span class="line">|    B + . o   .o+|</span><br><span class="line">|       .   o  ..o|</span><br><span class="line">|          .   .o |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>


<ul>
<li><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3></li>
</ul>
<p>&emsp;&emsp;如果你还没有自己的Github账号，那请到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>注册账号：</p>
<p>&emsp;&emsp;注册成功后github会发送验证邮件到你的邮箱，请查收邮件并进行验证。</p>
<ul>
<li><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3></li>
</ul>
<p>&emsp;&emsp;注册完成后，点击Start a project来新建一个仓库<br>&emsp;&emsp;使用Github Pages时输入的Repository name:yourname.github.io(yourname与注册用户名一致)</p>
<ul>
<li><h3 id="添加SSH-key到Github"><a href="#添加SSH-key到Github" class="headerlink" title="添加SSH key到Github"></a>添加SSH key到Github</h3></li>
</ul>
<p>&emsp;&emsp;打开终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .ssh/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat id_rsa.pub</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果前面生成成功的话终端将会输出本地生成的SSH key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUVVwTYKNcgV5Gs36wynCmy5fzP4Qv</span><br><span class="line">VHc5N71lX&#x2F;jPnWWvp0tkWvWgFWahQGRz26l6&#x2F;mJema+9ZTOXnlWpQRyV7z5lVI0ioLEv</span><br><span class="line">+6h32fw+oLL0TWmc+tN1vXgBifDPgAmbJQAXoh8WghHl6CH0c2pPFSMpVECuyAEBnrFj</span><br><span class="line">QnKvPOKG4Jwr4u9Rz+FLwyMSINu6J4nI0P8P7hMOq0ciz</span><br><span class="line">+0hDUOegeyqBLYK5TP3A8YRFDRoZIYJ1Ail4bkorJsTIzrhQAjAw4DipeiMSfAFZgNVX5vs</span><br><span class="line">+O0jI2BVZHbfxFd4b1zVWKrnfserbnwSDFIweXp youremailaddress</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这就是本地生成的 SSH key</p>
<p>&emsp;&emsp;登录Github，点击Settings—&gt;SSH and GPG keys —&gt; New SSH key</p>
<p>&emsp;&emsp;将本地生成的SSH key复制 到key文本框中，添加备注title(备注哪台电脑)，点击add key就行了</p>
<ul>
<li><h3 id="测试是否成功连上Github"><a href="#测试是否成功连上Github" class="headerlink" title="测试是否成功连上Github"></a>测试是否成功连上Github</h3></li>
</ul>
<p>&emsp;&emsp;终端输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@GitHub.com</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果是下面的反馈： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#39;GitHub.com (207.97.227.239)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is O0jI2BVZHbfxFd4b1zVWKrnfserbnwSDFIweXp.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;输入 yes 就好，然后会看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;表示已经成功链接Github了</p>
<ul>
<li><h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3></li>
</ul>
<p>&emsp;&emsp;现在已经可以通过SSH 链接到Github上了，还要完善一下个人信息</p>
<p>&emsp;&emsp;Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把用户名称和邮箱替换成你自己的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"用户名"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email  <span class="string">"自己的邮箱"</span></span></span><br></pre></td></tr></table></figure>


<p></p>
## 部署到Git

<p>&emsp;&emsp;安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deplyer-git</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;修改库配置 <code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">repo</td>
<td align="left">库（Repository）地址</td>
</tr>
<tr>
<td align="left">branch</td>
<td align="left">分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>
</tr>
<tr>
<td align="left">message</td>
<td align="left">自定义提交信息</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;使用Hexo提供的一键部署就能将网站部署到Github Pages上     </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
